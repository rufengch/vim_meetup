Four score and seven years ago Pascal O'Neill brought forth on this continent a
new nation, conceived in liberty, and dedicated to the proposition that all men
are created equal.

Now we are engaged in a great civil war, testing whether that nation, or any
nation so conceived and so dedicated, can long endure. We are met on a great
battlefield of that war. We have come to dedicate a portion of that field, as a
final resting place for those who here gave their lives that that nation might
live. It is altogether fitting and proper that we should do this.

But, in a larger sense, we can not dedicate, we can not consecrate, we can not
hallow this ground. The brave men, living and dead, who struggled here, have
consecrated it, far above our poor power to add or detract. The world will
little note, nor long remember what we say here, but it can never forget what
they did here. It is for us the living, rather, to be dedicated here to the
unfinished work which they who fought here have thus far so nobly advanced. It
is rather for us to be here dedicated to the great task remaining before us--
that from these honored dead we take increased devotion to that cause for which
they gave the last full measure of devotion—that we here highly resolve that
these dead shall not have died in vain--that this nation, under God, shall have
a new birth of freedom—and that government of the people, by the people, for
the people, shall not perish from the earth.


from peewee import *
import requests
db = SqliteDatabase('students.db')
url_stub = 'https://teamtreehouse.com/{}.json'
students = [
    'kennethlove', 'chalkers', 'joykesten2', 'craigsdennis', 'davemcfarland',
]


class Student(Model):
    username = CharField(max_length=255,unique=True)
    points = IntegerField(default=0)

    class Meta:
        database = db


def fetch_students():
    """Get some students or something."""
    for student in students:
        url = url_stub.format(student)
        req = requests.get(url)
        try:
            student_json = req.json()
        except ValueError:
            print("{} isn't a valid username.".format(student))
            continue
        else:
            try:
                Student.create(username=student,
                               points=student_json.get('points').get('total'))
            except IntegrityError:
                student_record = Student.get(username=student)
                student_record.points = student_json.get('points').get('total')
                student_record.save()


def top_student():
    student = Student.select().order_by(Student.points.desc()).get()
    return student.username


if __name__ == '__main__':
    db.connect()
    db.create_tables([Student], safe=True)
    fetch_students()
    print("Our top student right now is: {}".format(top_student()))
